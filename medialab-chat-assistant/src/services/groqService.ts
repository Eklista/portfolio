import Groq from 'groq-sdk';
import { 
  DEPARTMENTS, 
  SERVICES, 
  SUB_SERVICES, 
  getPopularClassrooms,
  getMediaLabSpaces,
  detectServicesFromText,
  searchClassrooms,
  EXTERNAL_LOCATIONS
} from '../data';

// Funci√≥n para verificar y obtener la API key
const getApiKey = (): string => {
  const apiKey = import.meta.env.VITE_GROQ_API_KEY;
  if (!apiKey) {
    throw new Error('VITE_GROQ_API_KEY no est√° configurada');
  }
  return apiKey;
};

// Inicializar cliente de Groq de forma lazy
let groqClient: Groq | null = null;

const getGroqClient = (): Groq => {
  if (!groqClient) {
    try {
      groqClient = new Groq({
        apiKey: getApiKey(),
        dangerouslyAllowBrowser: true
      });
    } catch (error) {
      console.error('Error inicializando Groq:', error);
      throw error;
    }
  }
  return groqClient;
};

// Interfaces para datos estructurados actualizadas
export interface ActivityLocation {
  type: 'university' | 'external' | 'virtual';
  tower?: string;
  classroom?: string;
  classroom_id?: string;
  externalAddress?: string;
  description?: string;
}

export interface ExtractedServices {
  mainServices: number[];
  subServices: { [serviceId: number]: number[] };
  details?: { [subServiceId: number]: string };
  detected_keywords?: string[];
}

export interface RequesterData {
  name: string;
  email: string;
  phone?: string;
  department_id: number;
  department_name?: string;
  position?: string;
  requestDate: string;
  additionalNotes?: string;
}

// Interfaces espec√≠ficas por tipo de actividad actualizadas
export interface SingleActivityData {
  type: 'single';
  activityName: string;
  department_id: number;
  department_name?: string;
  date: string;
  startTime: string;
  endTime: string;
  location: ActivityLocation;
  description?: string;
  services: ExtractedServices;
  requester: RequesterData;
}

export interface RecurrentActivityData {
  type: 'recurrent';
  activityName: string;
  department_id: number;
  department_name?: string;
  recurrence: {
    isRecurrent: boolean;
    type?: 'daily' | 'weekly' | 'monthly' | 'manual';
    startDate?: string;
    endDate?: string;
    startTime?: string;
    endTime?: string;
    weekDays?: string[];
    weekOfMonth?: string;
    dayOfMonth?: string;
    selectedDates?: string[];
  };
  location: ActivityLocation;
  description?: string;
  services: ExtractedServices;
  requester: RequesterData;
}

export interface PodcastData {
  type: 'podcast';
  podcastName: string;
  department_id: number;
  department_name?: string;
  description?: string;
  recurrence: {
    isRecurrent: boolean;
    type?: 'daily' | 'weekly' | 'monthly' | 'manual';
    startDate?: string;
    endDate?: string;
    startTime?: string;
    endTime?: string;
    weekDays?: string[];
    selectedDates?: string[];
  };
  location: ActivityLocation;
  moderators: Array<{
    name: string;
    position: string;
    role: string;
  }>;
  episodes: Array<{
    title: string;
    topic: string;
    department_id?: number;
    description?: string;
    guests?: string[];
  }>;
  services: ExtractedServices;
  requester: RequesterData;
}

export interface CourseData {
  type: 'course';
  careerName: string;
  department_id: number;
  department_name?: string;
  description?: string;
  recurrence: {
    isRecurrent: boolean;
    type?: 'daily' | 'weekly' | 'monthly' | 'manual';
    startDate?: string;
    endDate?: string;
    startTime?: string;
    endTime?: string;
    weekDays?: string[];
    selectedDates?: string[];
  };
  location: ActivityLocation;
  courses: Array<{
    name: string;
    professor: string;
    department_id?: number;
    duration: string;
    description?: string;
    recordingDates?: string[];
    recordingTime?: string;
  }>;
  services: ExtractedServices;
  requester: RequesterData;
}

export type ExtractedActivityData = SingleActivityData | RecurrentActivityData | PodcastData | CourseData;

class GroqService {
  private conversationHistory: Array<{ role: 'system' | 'user' | 'assistant'; content: string }> = [];

  constructor() {
    // Prompt amigable y contextualizado con datos reales
    this.conversationHistory.push({
      role: 'system',
      content: `Eres el asistente virtual amigable de MediaLab en Universidad Galileo. Tu personalidad es helpful, casual pero profesional, y siempre buscas hacer la vida m√°s f√°cil a los usuarios.

üéØ TU MISI√ìN: Ayudar a recopilar datos administrativos para solicitudes de servicios audiovisuales de manera natural y conversacional.

üëã PERSONALIDAD:
- Amigable y casual (usa "Hey", "¬°Genial!", "Perfecto")
- Proactivo: sugiere opciones cuando sea √∫til
- Emp√°tico: entiende que la gente est√° ocupada
- Inteligente: reconoce patrones y ayuda a completar informaci√≥n
- Paciente: no presiona, pero s√≠ gu√≠a amablemente

üèõÔ∏è CONOCIMIENTO DE LA UNIVERSIDAD:
Conoces perfectamente:
- Facultades: FISICC (Ingenier√≠a), FACTI (TI), FACOM (Comunicaciones), FACIMED (Medicina), FAHUM (Humanidades), FACE (Econ√≥micas), FACJUR (Derecho), FAARQ (Arquitectura)
- Ubicaciones populares: Torre 1 Sal√≥n 511, Torre 1 Sal√≥n 401 (muy solicitados)
- MediaLab: Torre 2 con 2 estudios profesionales y 3 cabinas de audio
- Torres: 1, 2, 3 (cada una con 6 niveles, salones numerados como T1-101, T1-201, etc.)
- Ubicaciones externas: Hoteles como Camino Real, Hilton, Barcel√≥

üé¨ SERVICIOS QUE OFRECES:
- Producci√≥n Audiovisual: grabaci√≥n video/audio, fotograf√≠a, iluminaci√≥n
- Transmisi√≥n: streaming, conferencias virtuales
- Postproducci√≥n: edici√≥n, motion graphics, subt√≠tulos
- Contenido Digital: dise√±o gr√°fico, redes sociales, animaciones
- Apoyo T√©cnico: configuraci√≥n, soporte, capacitaci√≥n

üí¨ ESTILO DE CONVERSACI√ìN:

BUENO ‚úÖ:
"¬°Hey! Perfecto, una conferencia. Me gusta la idea üòä

Para que todo salga genial, necesito algunos detalles:
‚Ä¢ ¬øCu√°l es el nombre espec√≠fico del evento?
‚Ä¢ ¬øQu√© facultad lo organiza? (FISICC, FACOM, etc.)
‚Ä¢ ¬øYa tienes fecha en mente? (formato DD/MM/YYYY)

Y si necesitas sugerencias de ubicaci√≥n, los salones m√°s populares son Torre 1 Sal√≥n 511 y 401. ¬øTe sirve alguno?"

MALO ‚ùå:
"Requiero los siguientes datos obligatorios:
1. Nombre de actividad
2. Facultad responsable  
3. Fecha espec√≠fica
Proporcione la informaci√≥n solicitada."

üîç INTELIGENCIA CONTEXTUAL:
- Si dicen "FISICC", traduce autom√°ticamente a "Facultad de Ingenier√≠a, Sistemas, Inform√°tica y Ciencias de la Computaci√≥n"
- Si mencionan "Torre 1, 511", reconoce que es una ubicaci√≥n v√°lida y popular
- Si dicen "grabaci√≥n y fotos", identifica servicios de video y fotograf√≠a
- Si usan fechas vagas ("viernes que viene"), amablemente pide fecha espec√≠fica
- Si el email no es @galileo.edu, sugiere usar el institucional

üö´ NUNCA preguntes detalles t√©cnicos como:
- Tipo de c√°maras o √°ngulos espec√≠ficos
- Configuraciones de iluminaci√≥n  
- Especificaciones de audio
- Detalles de postproducci√≥n

‚úÖ EN SU LUGAR di cosas como:
"Los aspectos t√©cnicos los coordinaremos con el equipo despu√©s"
"Nuestros profesionales se encargan de la parte t√©cnica"
"Nosotros nos ocupamos de todos los detalles t√©cnicos"

üéØ FLUJO NATURAL:
1. Saluda amigablemente e identifica el tipo de actividad
2. Pregunta datos b√°sicos de forma conversacional
3. Sugiere opciones cuando sea √∫til (ubicaciones populares, facultades)
4. Valida informaci√≥n de forma amigable
5. Confirma todo al final con entusiasmo

üîÑ MANEJO DE ERRORES COM√öN:
- Fechas vagas ‚Üí "Para asegurarme de que todo est√© coordinado, ¬øpodr√≠as darme la fecha exacta? Por ejemplo: 15/12/2024"
- Facultad unclear ‚Üí "¬øMe confirmas qu√© facultad organiza esto? Puede ser FISICC, FACOM, FACTI..."
- Email no institucional ‚Üí "Para la solicitud oficial necesito tu email institucional (@galileo.edu)"

Recuerda: Eres √∫til, amigable y eficiente. Tu objetivo es que la persona se sienta c√≥moda y que el proceso sea f√°cil.`
    });
  }

  // Funci√≥n helper para enriquecer respuestas con datos contextuales
  private enrichResponseWithContext(userMessage: string, baseResponse: string): string {
    let enrichedResponse = baseResponse;

    // Detectar servicios mencionados y ser m√°s espec√≠fico
    const detectedServices = detectServicesFromText(userMessage);
    if (detectedServices.length > 0) {
      const serviceNames = detectedServices.map(id => {
        const subService = SUB_SERVICES.find(s => s.id === id);
        return subService ? subService.name : 'servicio';
      }).join(', ');
      
      if (!baseResponse.includes('servicio')) {
        enrichedResponse += `\n\nüìù Veo que necesitas: ${serviceNames}. Perfecto, eso lo tenemos cubierto.`;
      }
    }

    // Sugerir ubicaciones populares si no se mencionan
    if (userMessage.toLowerCase().includes('ubicaci√≥n') || userMessage.toLowerCase().includes('sal√≥n') || 
        userMessage.toLowerCase().includes('donde')) {
      if (!baseResponse.includes('Torre') && !baseResponse.includes('sal√≥n')) {
        enrichedResponse += `\n\nüè¢ Sugerencia: Los salones m√°s populares son Torre 1 Sal√≥n 511 y Torre 1 Sal√≥n 401. Tambi√©n tenemos estudios en MediaLab (Torre 2) si necesitas algo m√°s especializado.`;
      }
    }

    // Ayudar con facultades si se menciona de forma unclear
    const lowerMessage = userMessage.toLowerCase();
    if ((lowerMessage.includes('ingenier√≠a') || lowerMessage.includes('sistemas')) && !lowerMessage.includes('fisicc')) {
      enrichedResponse += `\n\nüí° Por cierto, para ingenier√≠a y sistemas usamos la abreviaci√≥n FISICC.`;
    }

    return enrichedResponse;
  }

  // Enviar mensaje con contexto enriquecido
  async sendMessage(userMessage: string): Promise<string> {
    try {
      if (!import.meta.env.VITE_GROQ_API_KEY) {
        throw new Error('API key no configurada');
      }

      this.conversationHistory.push({
        role: 'user',
        content: userMessage
      });

      const groq = getGroqClient();

      // Agregar contexto de datos disponibles
      const contextualPrompt = `
      DATOS DISPONIBLES PARA REFERENCIA:
      
      Facultades disponibles:
      ${DEPARTMENTS.map(d => `- ${d.abbreviation}: ${d.name}`).join('\n')}
      
      Ubicaciones populares:
      ${getPopularClassrooms().map(c => `- ${c.name} (${c.tower_id})`).join('\n')}
      
      Estudios MediaLab:
      ${getMediaLabSpaces().map(s => `- ${s.name}`).join('\n')}
      
      Servicios principales:
      ${SERVICES.map(s => `- ${s.name}: ${s.description}`).join('\n')}
      
      Ubicaciones externas comunes:
      ${EXTERNAL_LOCATIONS.slice(0, 5).join(', ')}
      
      Responde de manera amigable, conversacional y √∫til. Usa estos datos para ser m√°s espec√≠fico y servicial.
      `;

      const completion = await groq.chat.completions.create({
        messages: [
          ...this.conversationHistory,
          { role: 'system', content: contextualPrompt }
        ],
        model: 'llama3-70b-8192',
        temperature: 0.7, // M√°s creativo y natural
        max_tokens: 1024,
        top_p: 0.9,
        stream: false
      });

      let assistantResponse = completion.choices[0]?.message?.content || 
        '¬°Ups! Algo no sali√≥ bien. ¬øPodr√≠as intentar de nuevo? üòÖ';

      // Enriquecer respuesta con contexto
      assistantResponse = this.enrichResponseWithContext(userMessage, assistantResponse);

      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });

      return assistantResponse;

    } catch (error) {
      console.error('Error detallado en GroqService:', error);
      
      if (error instanceof Error) {
        if (error.message.includes('API key') || error.message.includes('401')) {
          return '¬°Oops! üîë Parece que hay un problema con la configuraci√≥n. Verifica tu API key de Groq.';
        }
        if (error.message.includes('rate limit') || error.message.includes('429')) {
          return '¬°Estamos muy ocupados! üòÖ Intenta de nuevo en unos segunditos.';
        }
        if (error.message.includes('network') || error.message.includes('fetch')) {
          return '¬°Ay! üì° Problemas de conexi√≥n. Revisa tu internet y vuelve a intentar.';
        }
        
        return `¬°Rayos! üîß Error t√©cnico: ${error.message}. ¬øPuedes intentar reformular tu mensaje?`;
      }
      
      return '¬°Ups! ü§î Algo inesperado pas√≥. ¬øPodr√≠as intentar de nuevo con otras palabras?';
    }
  }

  // Extraer datos estructurados con mejor contexto
  async extractStructuredData(): Promise<ExtractedActivityData | null> {
    try {
      if (!import.meta.env.VITE_GROQ_API_KEY) {
        console.warn('API key no configurada para extracci√≥n de datos');
        return null;
      }

      const groq = getGroqClient();

      const extractionPrompt = `Analiza TODA la conversaci√≥n y extrae datos estructurados usando N√öMEROS ID reales de nuestra base de datos.

IMPORTANTE: Solo responde con JSON v√°lido, sin texto adicional.

CONTEXTO DE LA UNIVERSIDAD:
Departamentos (usar department_id):
${DEPARTMENTS.map(d => `${d.id}: ${d.abbreviation} - ${d.name}`).join('\n')}

Servicios (usar service_id y sub_service_id):
${SERVICES.map(s => `${s.id}: ${s.name}`).join('\n')}

Sub-servicios:
${SUB_SERVICES.map(s => `${s.id}: ${s.name} (categoria: ${s.service_id})`).join('\n')}

Torres y salones populares:
${getPopularClassrooms().map(c => `"${c.id}": ${c.name}`).join('\n')}

MediaLab:
${getMediaLabSpaces().map(s => `"${s.id}": ${s.name}`).join('\n')}

FORMATO JSON seg√∫n tipo:

Para ACTIVIDAD √öNICA:
{
  "type": "single",
  "activityName": "nombre espec√≠fico",
  "department_id": [ID_NUMERICO],
  "department_name": "nombre completo de facultad",
  "date": "DD/MM/YYYY",
  "startTime": "HH:MM",
  "endTime": "HH:MM",
  "location": {
    "type": "university|external|virtual",
    "tower": "Torre X",
    "classroom": "Sal√≥n XXX",
    "classroom_id": "TX-XXX",
    "externalAddress": "direcci√≥n completa"
  },
  "description": "descripci√≥n detallada",
  "services": {
    "mainServices": [1, 2],
    "subServices": {"1": [1, 2, 3], "2": [6, 7]},
    "details": {"1": "detalles espec√≠ficos si los hay"},
    "detected_keywords": ["palabras que detectaste"]
  },
  "requester": {
    "name": "nombre completo",
    "email": "email@galileo.edu",
    "phone": "tel√©fono",
    "department_id": [ID_NUMERICO],
    "department_name": "nombre departamento",
    "position": "cargo",
    "requestDate": "DD/MM/YYYY",
    "additionalNotes": "notas"
  }
}

REGLAS IMPORTANTES:
- Usa SIEMPRE IDs num√©ricos reales de arriba
- Si detectas "FISICC", usa department_id: 1
- Si detectas "Torre 1, Sal√≥n 511", usa classroom_id: "T1-511"
- Para servicios, detecta palabras clave y mapea a IDs reales
- Si no hay datos, usa null (NO "No especificado")

RESPONDE SOLO CON EL JSON:`;

      const completion = await groq.chat.completions.create({
        messages: [
          ...this.conversationHistory,
          { role: 'user', content: extractionPrompt }
        ],
        model: 'llama3-70b-8192',
        temperature: 0.1, // M√°s preciso para extracci√≥n
        max_tokens: 2048,
        top_p: 0.8,
        stream: false
      });

      const response = completion.choices[0]?.message?.content || '';
      
      try {
        // Limpiar la respuesta para extraer solo el JSON
        const cleanResponse = response.replace(/```json|```/g, '').trim();
        const jsonStart = cleanResponse.indexOf('{');
        const jsonEnd = cleanResponse.lastIndexOf('}') + 1;
        
        if (jsonStart !== -1 && jsonEnd > jsonStart) {
          const jsonStr = cleanResponse.slice(jsonStart, jsonEnd);
          const extractedData = JSON.parse(jsonStr) as ExtractedActivityData;
          
          // Enriquecer con nombres reales si solo tenemos IDs
          this.enrichExtractedData(extractedData);
          
          console.log('‚úÖ Datos extra√≠dos exitosamente:', extractedData);
          return extractedData;
        } else {
          throw new Error('No se encontr√≥ JSON v√°lido en la respuesta');
        }
        
      } catch (parseError) {
        console.error('‚ùå Error parseando JSON:', parseError);
        console.error('Respuesta original:', response);
        return null;
      }

    } catch (error) {
      console.error('‚ùå Error extrayendo datos estructurados:', error);
      return null;
    }
  }

  // Enriquecer datos extra√≠dos con nombres reales
  private enrichExtractedData(data: ExtractedActivityData): void {
    // Enriquecer departamento
    if (data.department_id && !data.department_name) {
      const dept = DEPARTMENTS.find(d => d.id === data.department_id);
      if (dept) {
        data.department_name = dept.name;
      }
    }

    // Enriquecer ubicaci√≥n
    if (data.location?.classroom_id && !data.location.classroom) {
      const classroom = searchClassrooms(data.location.classroom_id)[0];
      if (classroom) {
        data.location.classroom = classroom.name;
        data.location.tower = `Torre ${classroom.tower_id.replace('T', '')}`;
      }
    }

    // Enriquecer requester department
    if (data.requester?.department_id && !data.requester.department_name) {
      const dept = DEPARTMENTS.find(d => d.id === data.requester.department_id);
      if (dept) {
        data.requester.department_name = dept.name;
      }
    }
  }

  // Generar resumen final amigable
  async generateSummary(): Promise<string> {
    try {
      if (!import.meta.env.VITE_GROQ_API_KEY) {
        return '¬°Oops! üîß El resumen no est√° disponible en modo demo. Configura la API key de Groq para usar esta funcionalidad.';
      }

      const structuredData = await this.extractStructuredData();
      
      if (!structuredData) {
        return '¬°Ups! üìã No pude generar un resumen todav√≠a. Aseg√∫rate de haber proporcionado toda la informaci√≥n necesaria.';
      }

      const groq = getGroqClient();

      const summaryPrompt = `Genera un resumen amigable y profesional basado en estos datos:

${JSON.stringify(structuredData, null, 2)}

El resumen debe:
- Ser conversacional y amigable (usa "tu actividad", "has solicitado")
- Incluir todos los detalles importantes
- Estar bien organizado pero no rob√≥tico
- Usar emojis sutilmente para mejor legibilidad
- Sonar como si un humano amable lo escribiera

Ejemplo de tono:
"¬°Perfecto! He recopilado toda la informaci√≥n para tu [tipo de actividad]..."

NO uses formato de lista numerada. Usa p√°rrafos naturales con secciones.`;

      const completion = await groq.chat.completions.create({
        messages: [
          { role: 'system', content: 'Eres un asistente amigable que escribe res√∫menes conversacionales y profesionales.' },
          { role: 'user', content: summaryPrompt }
        ],
        model: 'llama3-70b-8192',
        temperature: 0.4, // Balance entre creatividad y precisi√≥n
        max_tokens: 1024,
        top_p: 0.9,
        stream: false
      });

      return completion.choices[0]?.message?.content || 
        '¬°Lo siento! üòÖ No pude generar el resumen. Pero tranquilo, todos tus datos est√°n guardados correctamente.';

    } catch (error) {
      console.error('Error generando resumen:', error);
      return '¬°Rayos! üîß Hubo un problemita generando el resumen. Pero no te preocupes, tu informaci√≥n est√° segura.';
    }
  }

  // Limpiar el historial de conversaci√≥n
  clearConversation(): void {
    this.conversationHistory = this.conversationHistory.slice(0, 1);
  }

  // Obtener el historial completo
  getConversationHistory(): Array<{ role: 'system' | 'user' | 'assistant'; content: string }> {
    return [...this.conversationHistory];
  }

  // Verificar si la API key est√° configurada
  static isConfigured(): boolean {
    const apiKey = import.meta.env.VITE_GROQ_API_KEY;
    const isConfigured = !!apiKey && apiKey.trim() !== '';
    console.log('Groq API configurada:', isConfigured ? 'S√≠ ‚úÖ' : 'No ‚ùå');
    if (!isConfigured) {
      console.log('üí° Para usar IA real, configura VITE_GROQ_API_KEY en tu archivo .env.local');
    }
    return isConfigured;
  }
}

// Exportar una instancia singleton
export const groqService = new GroqService();
export default GroqService;