import Groq from 'groq-sdk';

// Funci√≥n para verificar y obtener la API key
const getApiKey = (): string => {
  const apiKey = import.meta.env.VITE_GROQ_API_KEY;
  if (!apiKey) {
    throw new Error('VITE_GROQ_API_KEY no est√° configurada');
  }
  return apiKey;
};

// Inicializar cliente de Groq de forma lazy
let groqClient: Groq | null = null;

const getGroqClient = (): Groq => {
  if (!groqClient) {
    try {
      groqClient = new Groq({
        apiKey: getApiKey(),
        dangerouslyAllowBrowser: true
      });
    } catch (error) {
      console.error('Error inicializando Groq:', error);
      throw error;
    }
  }
  return groqClient;
};

// Tipos para el an√°lisis de datos
export interface ExtractedFormData {
  activityType?: 'single' | 'recurrent' | 'podcast' | 'course';
  activityName?: string;
  faculty?: string;
  date?: string;
  startTime?: string;
  endTime?: string;
  locationType?: 'university' | 'external' | 'virtual';
  location?: string;
  description?: string;
  services?: string[];
  requesterName?: string;
  requesterEmail?: string;
  requesterPhone?: string;
  recurrencePattern?: string;
  moderators?: string[];
  guests?: string[];
  courses?: string[];
  professors?: string[];
  confidence?: number;
}

class GroqService {
  private conversationHistory: Array<{ role: 'system' | 'user' | 'assistant'; content: string }> = [];

  constructor() {
    // Prompt inicial del sistema con contexto de MediaLab
    this.conversationHistory.push({
      role: 'system',
      content: `Eres el asistente virtual de MediaLab, una unidad de producci√≥n audiovisual universitaria en Guatemala. 

Tu objetivo es recopilar TODA la informaci√≥n OBLIGATORIA para completar una solicitud oficial de servicios. NING√öN campo puede quedar vac√≠o.

SERVICIOS DISPONIBLES:
- Grabaci√≥n de video y audio
- Transmisi√≥n en vivo (streaming)
- Edici√≥n y post-producci√≥n
- Dise√±o gr√°fico y animaci√≥n
- Apoyo t√©cnico en eventos
- Creaci√≥n de contenido digital

TIPOS DE ACTIVIDADES:
1. ACTIVIDAD √öNICA: Eventos √∫nicos como conferencias, presentaciones, graduaciones
2. ACTIVIDAD RECURRENTE: Series que se repiten (talleres semanales, seminarios mensuales)
3. PODCAST: Producci√≥n de episodios con moderadores e invitados
4. CURSOS: Grabaci√≥n acad√©mica de clases por carrera/semestre

FACULTADES DISPONIBLES:
- FISICC (Facultad de Ingenier√≠a en Sistemas, Inform√°tica y Ciencias de la Computaci√≥n)
- FACTI (Facultad de Ciencias y Tecnolog√≠as de la Informaci√≥n)
- FACOM (Facultad de Comunicaci√≥n)

üö® INFORMACI√ìN OBLIGATORIA - DEBES PREGUNTAR POR TODO:

üìã DETALLES DE LA ACTIVIDAD (OBLIGATORIO):
‚úÖ Tipo de actividad (√∫nica, recurrente, podcast, cursos)
‚úÖ Nombre completo de la actividad/evento
‚úÖ Facultad o departamento responsable
‚úÖ Fecha(s) espec√≠fica(s) (d√≠a/mes/a√±o)
‚úÖ Hora de inicio y hora de fin
‚úÖ Ubicaci√≥n exacta:
   - Si es en universidad: Torre y n√∫mero de sal√≥n
   - Si es externa: Direcci√≥n completa
   - Si es virtual: Confirmar plataforma
‚úÖ Descripci√≥n detallada de la actividad

üìù SERVICIOS ESPEC√çFICOS (OBLIGATORIO):
‚úÖ Qu√© servicios necesita exactamente:
   - ¬øGrabaci√≥n de video? ¬øCu√°ntas c√°maras?
   - ¬øTransmisi√≥n en vivo? ¬øQu√© plataforma?
   - ¬øGrabaci√≥n de audio? ¬øQu√© tipo de micr√≥fonos?
   - ¬øEdici√≥n posterior? ¬øQu√© tipo?
   - ¬øApoyo t√©cnico? ¬øQu√© equipos?

üë§ DATOS DEL SOLICITANTE (CR√çTICO - SIN EXCEPCI√ìN):
‚úÖ Nombre completo del solicitante
‚úÖ Correo electr√≥nico institucional (@universidad.edu)
‚úÖ N√∫mero de tel√©fono de contacto
‚úÖ Departamento/facultad de adscripci√≥n
‚úÖ Cargo o posici√≥n (profesor, coordinador, estudiante, etc.)

PROCESO OBLIGATORIO PASO A PASO:
1. Saluda y explica tu funci√≥n
2. Pregunta por el tipo de actividad que necesitan
3. Recopila TODOS los detalles de la actividad (nombre, fecha, hora, lugar, descripci√≥n)
4. Pregunta por TODOS los servicios espec√≠ficos que necesitan
5. **OBLIGATORIO**: Solicita TODOS los datos personales del solicitante
6. Revisa que NO falte NING√öN dato
7. Confirma toda la informaci√≥n completa
8. Solo entonces ofrece generar el PDF

FRASES OBLIGATORIAS PARA DATOS DEL SOLICITANTE:
- "Para procesar oficialmente tu solicitud, necesito tus datos completos"
- "Es requisito institucional tener todos los datos del solicitante"
- "Por favor, proporciona tu nombre completo, email institucional, tel√©fono y departamento"
- "Sin estos datos no puedo generar la solicitud oficial"

REGLAS CR√çTICAS - NUNCA VIOLES ESTAS REGLAS:
üö´ NUNCA generes resumen sin TODOS los datos del solicitante
üö´ NUNCA asumas informaci√≥n que no te han dado
üö´ NUNCA permitas campos vac√≠os o con "No especificado"
üö´ NUNCA finalices sin confirmar que tienes TODO
‚úÖ SIEMPRE insiste amablemente hasta tener informaci√≥n completa
‚úÖ SIEMPRE verifica que el email sea institucional
‚úÖ SIEMPRE confirma fechas y horarios espec√≠ficos

VERIFICACI√ìN FINAL OBLIGATORIA:
Antes de generar PDF, confirma que tienes:
- ‚úÖ Tipo y nombre de actividad
- ‚úÖ Facultad/departamento
- ‚úÖ Fecha(s) y horario(s) exactos
- ‚úÖ Ubicaci√≥n espec√≠fica
- ‚úÖ Servicios detallados
- ‚úÖ Nombre completo del solicitante
- ‚úÖ Email institucional
- ‚úÖ Tel√©fono
- ‚úÖ Departamento del solicitante

Si falta CUALQUIER dato, pregunta espec√≠ficamente por √©l.

S√© amigable pero firme. Es mejor una conversaci√≥n m√°s larga con datos completos que una solicitud incompleta.`
    });
  }

  // Enviar mensaje y obtener respuesta
  async sendMessage(userMessage: string): Promise<string> {
    try {
      // Verificar si tenemos API key antes de intentar
      if (!import.meta.env.VITE_GROQ_API_KEY) {
        throw new Error('API key no configurada');
      }

      // Agregar mensaje del usuario al historial
      this.conversationHistory.push({
        role: 'user',
        content: userMessage
      });

      // Obtener cliente de Groq
      const groq = getGroqClient();

      // Llamar a la API de Groq
      const completion = await groq.chat.completions.create({
        messages: this.conversationHistory,
        model: 'llama3-70b-8192',
        temperature: 0.7,
        max_tokens: 1024,
        top_p: 1,
        stream: false
      });

      const assistantResponse = completion.choices[0]?.message?.content || 
        'Lo siento, no pude procesar tu mensaje. ¬øPuedes intentar de nuevo?';

      // Agregar respuesta del asistente al historial
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });

      return assistantResponse;

    } catch (error) {
      console.error('Error detallado en GroqService:', error);
      
      // Manejar errores espec√≠ficos con m√°s detalle
      if (error instanceof Error) {
        console.error('Error message:', error.message);
        
        if (error.message.includes('API key') || error.message.includes('401')) {
          return 'Error: No se pudo autenticar con el servicio de IA. Verifica tu API key en el archivo .env.local';
        }
        if (error.message.includes('rate limit') || error.message.includes('429')) {
          return 'El servicio est√° temporalmente ocupado. Por favor intenta en unos segundos.';
        }
        if (error.message.includes('network') || error.message.includes('fetch')) {
          return 'Error de conexi√≥n. Verifica tu conexi√≥n a internet y vuelve a intentar.';
        }
        
        return `Error t√©cnico: ${error.message}. Revisa la consola del navegador para m√°s detalles.`;
      }
      
      return 'Lo siento, hubo un problema t√©cnico inesperado. ¬øPuedes intentar reformular tu mensaje?';
    }
  }

  // Generar resumen final de la solicitud
  async generateSummary(): Promise<string> {
    try {
      // Verificar si tenemos API key
      if (!import.meta.env.VITE_GROQ_API_KEY) {
        return 'Resumen no disponible en modo demo. Configure la API key de Groq para esta funcionalidad.';
      }

      // Obtener cliente de Groq
      const groq = getGroqClient();

      const summaryPrompt = `Genera un resumen profesional y completo de toda la informaci√≥n recopilada en esta conversaci√≥n para la solicitud de servicios de MediaLab.

El resumen debe incluir:
- Tipo de actividad y nombre
- Detalles de fechas, horarios y ubicaci√≥n
- Servicios solicitados
- Informaci√≥n del solicitante
- Cualquier detalle adicional relevante

Usa un formato claro y profesional que pueda ser usado como confirmaci√≥n de la solicitud.`;

      const summaryCompletion = await groq.chat.completions.create({
        messages: [
          ...this.conversationHistory,
          { role: 'user', content: summaryPrompt }
        ],
        model: 'llama3-70b-8192',
        temperature: 0.3,
        max_tokens: 1024,
        top_p: 1,
        stream: false
      });

      return summaryCompletion.choices[0]?.message?.content || 
        'No se pudo generar el resumen. Por favor revisa la informaci√≥n proporcionada.';

    } catch (error) {
      console.error('Error generando resumen:', error);
      return 'Error al generar el resumen de la solicitud.';
    }
  }

  // Limpiar el historial de conversaci√≥n
  clearConversation(): void {
    this.conversationHistory = this.conversationHistory.slice(0, 1); // Mantener solo el prompt del sistema
  }

  // Obtener el historial completo
  getConversationHistory(): Array<{ role: 'system' | 'user' | 'assistant'; content: string }> {
    return [...this.conversationHistory];
  }

  // Verificar si la API key est√° configurada
  static isConfigured(): boolean {
    const apiKey = import.meta.env.VITE_GROQ_API_KEY;
    const isConfigured = !!apiKey && apiKey.trim() !== '';
    console.log('Groq API configurada:', isConfigured ? 'S√≠' : 'No');
    if (!isConfigured) {
      console.log('Para usar IA real, configura VITE_GROQ_API_KEY en tu archivo .env.local');
    }
    return isConfigured;
  }
}

// Exportar una instancia singleton
export const groqService = new GroqService();
export default GroqService;